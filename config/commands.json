{
  "environments": {
    "development": {
      "name": "Development",
      "color": "#10b981"
    },
    "production": {
      "name": "Production",
      "color": "#ef4444"
    }
  },
  "containers": {
    "development": [
      {
        "name": "backend",
        "displayName": "Backend API",
        "service": "backend"
      },
      {
        "name": "postgres",
        "displayName": "PostgreSQL DB",
        "service": "postgres"
      },
      {
        "name": "wuzapi",
        "displayName": "WhatsApp API",
        "service": "wuzapi"
      }
    ],
    "production": [
      {
        "name": "backend",
        "displayName": "Backend API",
        "service": "backend"
      },
      {
        "name": "postgres",
        "displayName": "PostgreSQL DB", 
        "service": "postgres"
      },
      {
        "name": "wuzapi",
        "displayName": "WhatsApp API",
        "service": "wuzapi"
      }
    ]
  },
  "working_directory": "/home/danil/Projects/chatwithoats",
  "commands": {
    "container": {
      "development": {
        "start": "docker compose -f docker-compose.dev.yml up -d {service}",
        "stop": "docker compose -f docker-compose.dev.yml stop {service}",
        "restart": "docker compose -f docker-compose.dev.yml restart {service}",
        "status": "docker compose -f docker-compose.dev.yml ps {service}",
        "start_all": "docker compose -f docker-compose.dev.yml up -d",
        "stop_all": "docker compose -f docker-compose.dev.yml down"
      },
      "production": {
        "start": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml up -d {service}\"",
        "stop": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml stop {service}\"",
        "restart": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml restart {service}\"",
        "status": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml ps {service}\"",
        "start_all": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml up -d\"",
        "stop_all": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml down\""
      }
    },
    "logs": {
      "development": {
        "backend": "docker compose -f docker-compose.dev.yml logs backend -f",
        "backend_tail": "docker compose -f docker-compose.dev.yml logs backend --tail=100",
        "wuzapi": "docker compose -f docker-compose.dev.yml logs wuzapi -f",
        "wuzapi_tail": "docker compose -f docker-compose.dev.yml logs wuzapi --tail=50",
        "all_services": "docker compose -f docker-compose.dev.yml logs -f -t"
      },
      "production": {
        "backend": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml logs backend -f --tail=100\"",
        "wuzapi": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml logs wuzapi --tail=50\"",
        "all_services": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml logs -f\""
      },
      "frontend": {
        "vercel_logs": "vercel logs --output json",
        "vercel_latest": "vercel ls --limit 1",
        "vercel_deployments": "vercel ls --limit 10"
      }
    },
    "status": {
      "development": {
        "docker_status": "docker compose -f docker-compose.dev.yml ps",
        "docker_services": "docker compose -f docker-compose.dev.yml ps --format table",
        "list_containers": "docker ps --format \"{{.Names}}\""
      },
      "production": {
        "docker_status": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml ps\"",
        "docker_services": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"cd /home/ec2-user/chatwithoats && docker compose -f docker-compose.prod.yml ps --format table\"",
        "list_containers": "ssh -i aws_key.pem -o StrictHostKeyChecking=no ec2-user@51.84.91.162 \"docker ps --format '{{.Names}}'\""
      },
      "frontend": {
        "vercel_status": "vercel inspect --wait",
        "vercel_project": "vercel project ls"
      }
    },
    "deployment": {
      "git_status": "git status --porcelain",
      "git_log": "git log --oneline -10",
      "git_branch": "git branch -a",
      "git_current_commit": "git rev-parse --short HEAD",
      "git_remote_commit": "git rev-parse --short origin/master",
      "vercel_deployments": "vercel ls --limit 5",
      "vercel_status": "vercel project",
      "vercel_current_branch": "git branch --show-current",
      "docker_status": "docker ps --format 'table {{.Names}}\\t{{.Status}}\\t{{.Ports}}'",
      "deploy_frontend": "vercel --prod",
      "deploy_backend": "git push heroku main",
      "github_actions": "gh run list --limit 10 --json status,conclusion,name,createdAt,headBranch,headSha",
      "github_deployments": "gh api repos/:owner/:repo/deployments --jq '.[] | {id, ref, environment, created_at, description}' | head -20"
    },
    "testing": {
      "run_unit_tests": "npm test",
      "run_integration_tests": "npm run test:integration",
      "run_e2e_tests": "npm run test:e2e",
      "lint_check": "npm run lint",
      "type_check": "npm run type-check"
    },
    "database": {
      "development": {
        "connect": "psql postgresql://localhost:5432/dev_db",
        "status": "pg_isready -h localhost -p 5432",
        "queries": {
          "user_count": "psql -d dev_db -c 'SELECT COUNT(*) FROM users;'",
          "recent_logs": "psql -d dev_db -c 'SELECT * FROM logs ORDER BY created_at DESC LIMIT 10;'"
        }
      },
      "production": {
        "connect": "heroku pg:psql --app your-app",
        "status": "heroku pg:info --app your-app",
        "queries": {
          "user_count": "heroku pg:psql --app your-app -c 'SELECT COUNT(*) FROM users;'",
          "recent_logs": "heroku pg:psql --app your-app -c 'SELECT * FROM logs ORDER BY created_at DESC LIMIT 10;'"
        }
      }
    },
    "system": {
      "disk_usage": "df -h",
      "memory_usage": "free -h",
      "cpu_usage": "top -bn1 | grep 'Cpu(s)'",
      "network_status": "netstat -tuln",
      "process_list": "ps aux --sort=-%cpu | head -10"
    }
  },
  "refresh_intervals": {
    "logs": 2000,
    "deployment": 30000,
    "database": 10000,
    "system": 5000
  },
  "ai_prompts": {
    "analyze_logs": "Analyze these log entries and identify any issues, errors, or patterns that need attention:",
    "deployment_summary": "Summarize the deployment status and highlight any issues:",
    "test_analysis": "Analyze these test results and provide insights on failures and recommendations:"
  }
} 